apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
#  name: demostacks.gcp-stack-template-plus.projectkerberus.io
  name: core.modules.krateoplatformops.io
spec:
#  writeConnectionSecretsToNamespace: crossplane-system
  writeConnectionSecretsToNamespace: krateo-system
  compositeTypeRef:
#    apiVersion: gcp-stack-template-plus.projectkerberus.io/v1alpha1
    apiVersion: modules.krateoplatformops.io/v1alpha1
#    kind: DemoStack
    kind: Core
  resources:
    - base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: ProviderConfig
        spec:
          credentials:
            source: InjectedIdentity
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-helm-providerconfig-incluster"
      readinessChecks:
        - type: None
    - base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          forProvider:
            chart:
              name: argo-cd
              repository: https://argoproj.github.io/argo-helm
              version: 3.26.5
            namespace: krateo-system
            values:
              config:
                accounts.krateo-dashboard: apiKey, login
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-helm-providerconfig-incluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-argocd-release"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.annotations[crossplane.io/external-name]
    - base:
        apiVersion: pkg.crossplane.io/v1alpha1
        kind: ControllerConfig
        spec:
          args:
            - --debug
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-argocd-provider-controllerconfig"
    - base:
        apiVersion: pkg.crossplane.io/v1
        kind: Provider
        metadata:
          name: provider-argocd
        spec:
          package: 'ghcr.io/krateoplatformops/xp-provider-argocd-token:0.1.0'
          packagePullPolicy: Always
          packagePullSecrets:
            - name: cr-token
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-argocd-provider"
        - fromFieldPath: metadata.name
          toFieldPath: spec.controllerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-argocd-provider-controllerconfig"
    - base:
        apiVersion: argocd.krateoplatformops.io/v1alpha1
        kind: ProviderConfig
        metadata:
          name: argocd-provider-config
        spec:
#          serverAddr: argocd-server.argocd.svc:443
          insecure: true
          credentials:
            source: Secret
            secretRef:
              namespace: krateo-system
              name: argocd-initial-admin-secret
              key: password
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-argocd-providerconfig"
        - fromFieldPath: metadata.name
          toFieldPath: spec.serverAddr
          transforms:
            - type: string
              string:
                fmt: "%s-argocd-server.krateo-system.svc:443"
    # - base:
    #     apiVersion: v1
    #     kind: ConfigMap
    #     metadata:
    #       name: argocd-cm
    #       namespace: krateo-system
    #       labels:
    #         app.kubernetes.io/name: argocd-cm
    #         app.kubernetes.io/part-of: argocd
    #     data:
    #       # add an additional local user with apiKey and login capabilities
    #       #   apiKey - allows generating API keys
    #       #   login - allows to login using UI
    #       accounts.krateo-dashboard: apiKey, login
    - base:
        apiVersion: tokens.argocd.krateoplatformops.io/v1alpha1
        kind: Token
        metadata:
          name: krateo-dashboard-argocd-token
        spec:
          forProvider:
            expiresIn: 0s
            account: krateo-dashboard
            writeTokenSecretToRef:
              name: krateo-dashboard-argocd-token
              key: authToken
              namespace: krateo-system
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-argocd-providerconfig"
